// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_IPCMESSAGE_COOCAA_H_
#define FLATBUFFERS_GENERATED_IPCMESSAGE_COOCAA_H_

#include "flatbuffers/flatbuffers.h"


namespace coocaa {

struct IPCMessageFormat;

struct IPCMessageFormat FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  const flatbuffers::String *uuid() const { return GetPointer<const flatbuffers::String *>(4); }
  const flatbuffers::String *to() const { return GetPointer<const flatbuffers::String *>(6); }
  const flatbuffers::String *from() const { return GetPointer<const flatbuffers::String *>(8); }
  const flatbuffers::String *cmd() const { return GetPointer<const flatbuffers::String *>(10); }
  uint32_t needAck() const { return GetField<uint32_t>(12, 0); }
  uint32_t bodysize() const { return GetField<uint32_t>(14, 0); }
  const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *keys() const { return GetPointer<const flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>> *>(16); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 4 /* uuid */) &&
           verifier.Verify(uuid()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 6 /* to */) &&
           verifier.Verify(to()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 8 /* from */) &&
           verifier.Verify(from()) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 10 /* cmd */) &&
           verifier.Verify(cmd()) &&
           VerifyField<uint32_t>(verifier, 12 /* needAck */) &&
           VerifyField<uint32_t>(verifier, 14 /* bodysize */) &&
           VerifyField<flatbuffers::uoffset_t>(verifier, 16 /* keys */) &&
           verifier.Verify(keys()) &&
           verifier.VerifyVectorOfStrings(keys()) &&
           verifier.EndTable();
  }
};

struct IPCMessageFormatBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_uuid(flatbuffers::Offset<flatbuffers::String> uuid) { fbb_.AddOffset(4, uuid); }
  void add_to(flatbuffers::Offset<flatbuffers::String> to) { fbb_.AddOffset(6, to); }
  void add_from(flatbuffers::Offset<flatbuffers::String> from) { fbb_.AddOffset(8, from); }
  void add_cmd(flatbuffers::Offset<flatbuffers::String> cmd) { fbb_.AddOffset(10, cmd); }
  void add_needAck(uint32_t needAck) { fbb_.AddElement<uint32_t>(12, needAck, 0); }
  void add_bodysize(uint32_t bodysize) { fbb_.AddElement<uint32_t>(14, bodysize, 0); }
  void add_keys(flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys) { fbb_.AddOffset(16, keys); }
  IPCMessageFormatBuilder(flatbuffers::FlatBufferBuilder &_fbb) : fbb_(_fbb) { start_ = fbb_.StartTable(); }
  IPCMessageFormatBuilder &operator=(const IPCMessageFormatBuilder &);
  flatbuffers::Offset<IPCMessageFormat> Finish() {
    auto o = flatbuffers::Offset<IPCMessageFormat>(fbb_.EndTable(start_, 7));
    return o;
  }
};

inline flatbuffers::Offset<IPCMessageFormat> CreateIPCMessageFormat(flatbuffers::FlatBufferBuilder &_fbb,
   flatbuffers::Offset<flatbuffers::String> uuid = 0,
   flatbuffers::Offset<flatbuffers::String> to = 0,
   flatbuffers::Offset<flatbuffers::String> from = 0,
   flatbuffers::Offset<flatbuffers::String> cmd = 0,
   uint32_t needAck = 0,
   uint32_t bodysize = 0,
   flatbuffers::Offset<flatbuffers::Vector<flatbuffers::Offset<flatbuffers::String>>> keys = 0) {
  IPCMessageFormatBuilder builder_(_fbb);
  builder_.add_keys(keys);
  builder_.add_bodysize(bodysize);
  builder_.add_needAck(needAck);
  builder_.add_cmd(cmd);
  builder_.add_from(from);
  builder_.add_to(to);
  builder_.add_uuid(uuid);
  return builder_.Finish();
}

inline const IPCMessageFormat *GetIPCMessageFormat(const void *buf) { return flatbuffers::GetRoot<IPCMessageFormat>(buf); }

inline bool VerifyIPCMessageFormatBuffer(flatbuffers::Verifier &verifier) { return verifier.VerifyBuffer<IPCMessageFormat>(); }

inline void FinishIPCMessageFormatBuffer(flatbuffers::FlatBufferBuilder &fbb, flatbuffers::Offset<IPCMessageFormat> root) { fbb.Finish(root); }

}  // namespace coocaa

#endif  // FLATBUFFERS_GENERATED_IPCMESSAGE_COOCAA_H_
